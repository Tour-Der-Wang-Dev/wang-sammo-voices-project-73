
name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Pre-deployment Checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      deploy-env: ${{ steps.set-env.outputs.environment }}
      should-deploy: ${{ steps.check-changes.outputs.should-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Set deployment environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for deployable changes
        id: check-changes
        run: |
          # Check if there are changes in source files (not just docs)
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(tsx?|jsx?|css|json)$' > /dev/null; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Verify CI passed
        run: |
          # This job will only run if CI workflow completed successfully
          echo "CI checks passed, proceeding with deployment"

  # Job 2: Build for Deployment
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [pre-deploy]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ needs.pre-deploy.outputs.deploy-env == 'production' && secrets.VITE_SUPABASE_URL_PROD || secrets.VITE_SUPABASE_URL_STAGING }}
          VITE_SUPABASE_ANON_KEY: ${{ needs.pre-deploy.outputs.deploy-env == 'production' && secrets.VITE_SUPABASE_ANON_KEY_PROD || secrets.VITE_SUPABASE_ANON_KEY_STAGING }}
          VITE_APP_ENV: ${{ needs.pre-deploy.outputs.deploy-env }}
          
      - name: Generate build info
        run: |
          echo "{
            \"version\": \"${{ github.sha }}\",
            \"buildTime\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"environment\": \"${{ needs.pre-deploy.outputs.deploy-env }}\",
            \"branch\": \"${{ github.ref_name }}\",
            \"commit\": \"${{ github.sha }}\"
          }" > dist/build-info.json
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ needs.pre-deploy.outputs.deploy-env }}
          path: dist/
          retention-days: 30

  # Job 3: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy, build]
    if: needs.pre-deploy.outputs.deploy-env == 'staging'
    environment:
      name: staging
      url: https://staging.wangsammo.app
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-staging
          path: dist/
          
      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL_STAGING }} --env VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_STAGING }}'
          working-directory: dist/
          
      - name: Update deployment status
        run: |
          echo "✅ Staging deployment completed successfully"
          echo "🌐 URL: https://staging.wangsammo.app"

  # Job 4: Production Deployment (with approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy, build]
    if: needs.pre-deploy.outputs.deploy-env == 'production'
    environment:
      name: production
      url: https://wangsammo.app
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/
          
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL_PROD }} --env VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_PROD }}'
          working-directory: dist/
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## 🚀 Production Deployment
            
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Environment:** Production
            **Deploy Time:** ${{ github.event.head_commit.timestamp }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Deployment URLs
            - 🌐 [Production Site](https://wangsammo.app)
            - 📊 [Dashboard](https://wangsammo.app/dashboard)
            - 📱 [Report Form](https://wangsammo.app/report)
          draft: false
          prerelease: false

  # Job 5: Post-deployment Tests
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Set test URL
        id: set-url
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "test-url=https://wangsammo.app" >> $GITHUB_OUTPUT
          else
            echo "test-url=https://staging.wangsammo.app" >> $GITHUB_OUTPUT
          fi
          
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.set-url.outputs.test-url }})
          if [[ $response == "200" ]]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status: $response"
            exit 1
          fi
          
      - name: Run smoke tests
        run: |
          npm run test:smoke -- --baseUrl=${{ steps.set-url.outputs.test-url }}
          
      - name: Performance audit
        run: |
          npx lighthouse ${{ steps.set-url.outputs.test-url }} --output=json --output-path=lighthouse-results.json
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: post-deploy-test-results
          path: |
            lighthouse-results.json
            test-results/

  # Job 6: Database Migration (if needed)
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: needs.deploy-production.result == 'success' && contains(github.event.head_commit.message, '[migrate]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        run: |
          npm install -g @supabase/cli
          
      - name: Run migrations
        run: |
          supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --db-password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Job 7: Notify stakeholders
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deploy-tests]
    if: always()
    
    steps:
      - name: Prepare notification message
        id: message
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            environment="Production"
            url="https://wangsammo.app"
            icon="🚀"
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            environment="Staging"
            url="https://staging.wangsammo.app"
            icon="🧪"
          else
            environment="Failed"
            url=""
            icon="❌"
          fi
          
          echo "environment=$environment" >> $GITHUB_OUTPUT
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "icon=$icon" >> $GITHUB_OUTPUT
          
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            ${{ steps.message.outputs.icon }} **Wang Sammo Deployment**
            
            **Environment:** ${{ steps.message.outputs.environment }}
            **Status:** ${{ job.status }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            **URL:** ${{ steps.message.outputs.url }}
            
            **Changes:** ${{ github.event.head_commit.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Update status badge
        if: needs.deploy-production.result == 'success'
        run: |
          # Update README.md with deployment status
          echo "Production deployment completed at $(date -u)" > deployment-status.txt

  # Job 8: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.artifacts
              .filter(artifact => artifact.name.startsWith('build-'))
              .filter(artifact => new Date(artifact.created_at) < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000));
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
            
            console.log(`Cleaned up ${oldArtifacts.length} old artifacts`);
