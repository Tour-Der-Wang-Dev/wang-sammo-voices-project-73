
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { QrCode, Download, Share2, Copy, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface QRCodeData {
  url: string;
  size: string;
  category?: string;
  location?: string;
}

const QRCodeManager = () => {
  const { toast } = useToast();
  const [qrData, setQrData] = useState<QRCodeData>({
    url: window.location.origin + '/report',
    size: '200',
    category: '',
    location: ''
  });
  const [copied, setCopied] = useState(false);

  const generateQRUrl = () => {
    let baseUrl = window.location.origin + '/report';
    const params = new URLSearchParams();
    
    if (qrData.category) {
      params.append('category', qrData.category);
    }
    if (qrData.location) {
      params.append('location', qrData.location);
    }
    
    if (params.toString()) {
      baseUrl += '?' + params.toString();
    }
    
    return `https://api.qrserver.com/v1/create-qr-code/?size=${qrData.size}x${qrData.size}&data=${encodeURIComponent(baseUrl)}`;
  };

  const handleDownload = async () => {
    try {
      const response = await fetch(generateQRUrl());
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `qr-code-wangsammo-${Date.now()}.png`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast({
        title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î QR Code ‡πÅ‡∏•‡πâ‡∏ß'
      });
    } catch (error) {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î QR Code ‡πÑ‡∏î‡πâ',
        variant: 'destructive'
      });
    }
  };

  const handleCopyUrl = async () => {
    const url = qrData.url + (qrData.category ? `?category=${qrData.category}` : '');
    try {
      await navigator.clipboard.writeText(url);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({
        title: '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
        description: '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
      });
    } catch (error) {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ',
        variant: 'destructive'
      });
    }
  };

  const categories = [
    { value: 'road', label: '‡∏ñ‡∏ô‡∏ô', icon: 'üõ£Ô∏è' },
    { value: 'water', label: '‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤', icon: 'üíß' },
    { value: 'waste', label: '‡∏Ç‡∏¢‡∏∞', icon: 'üóëÔ∏è' },
    { value: 'electricity', label: '‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', icon: '‚ö°' },
    { value: 'public_safety', label: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', icon: 'üö®' },
    { value: 'environment', label: '‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°', icon: 'üå±' },
    { value: 'other', label: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', icon: 'üìù' }
  ];

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <QrCode className="text-orange-500" />
            <span>‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="category">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)</Label>
              <Select value={qrData.category} onValueChange={(value) => setQrData(prev => ({...prev, category: value}))}>
                <SelectTrigger>
                  <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</SelectItem>
                  {categories.map((category) => (
                    <SelectItem key={category.value} value={category.value}>
                      <div className="flex items-center space-x-2">
                        <span>{category.icon}</span>
                        <span>{category.label}</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="location">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)</Label>
              <Input
                id="location"
                value={qrData.location}
                onChange={(e) => setQrData(prev => ({...prev, location: e.target.value}))}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏±‡∏î, ‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
              />
            </div>

            <div>
              <Label htmlFor="size">‡∏Ç‡∏ô‡∏≤‡∏î QR Code</Label>
              <Select value={qrData.size} onValueChange={(value) => setQrData(prev => ({...prev, size: value}))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="150">‡πÄ‡∏•‡πá‡∏Å (150x150)</SelectItem>
                  <SelectItem value="200">‡∏Å‡∏•‡∏≤‡∏á (200x200)</SelectItem>
                  <SelectItem value="300">‡πÉ‡∏´‡∏ç‡πà (300x300)</SelectItem>
                  <SelectItem value="400">‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å (400x400)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="flex justify-center">
            <div className="text-center space-y-4">
              <img
                src={generateQRUrl()}
                alt="QR Code"
                className="border-2 border-orange-200 rounded-lg mx-auto"
              />
              <div className="flex flex-wrap gap-2 justify-center">
                <Button onClick={handleDownload} className="flex items-center space-x-2">
                  <Download size={16} />
                  <span>‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î</span>
                </Button>
                <Button onClick={handleCopyUrl} variant="outline" className="flex items-center space-x-2">
                  {copied ? <CheckCircle size={16} /> : <Copy size={16} />}
                  <span>{copied ? '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß' : '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå'}</span>
                </Button>
              </div>
              <p className="text-xs text-gray-500 max-w-xs break-all">
                {qrData.url}{qrData.category ? `?category=${qrData.category}` : ''}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô QR Code</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3 text-sm">
            <div className="flex items-start space-x-2">
              <span className="bg-orange-100 text-orange-700 px-2 py-1 rounded text-xs font-medium">1</span>
              <p>‡∏û‡∏¥‡∏°‡∏û‡πå QR Code ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®, ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ä‡∏∏‡∏°‡∏ä‡∏ô</p>
            </div>
            <div className="flex items-start space-x-2">
              <span className="bg-orange-100 text-orange-700 px-2 py-1 rounded text-xs font-medium">2</span>
              <p>‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤</p>
            </div>
            <div className="flex items-start space-x-2">
              <span className="bg-orange-100 text-orange-700 px-2 py-1 rounded text-xs font-medium">3</span>
              <p>‡∏´‡∏≤‡∏Å QR Code ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default QRCodeManager;
